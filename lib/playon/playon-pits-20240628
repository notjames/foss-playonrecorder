# frozen_string_literal: true

require 'gli'

class Main
  extend GLI::App

  wrap_help_text :verbatim

  program_desc 'Playon Recorder API CLI Tool'

  subcommand_option_handling :normal
  arguments :strict

  accept(Date) do |string|
      Date.parse(string)
  end

  desc 'Verbosity level'
  flag [:verbose], type: :boolean

  desc 'Email address used to auth to PlayOn Recorder'
  flag [:email],   type: String, required: true


  desc 'Manage videos on the PlayOn Recorder'
  long_desc %{List, download, and delete videos on the PlayOn Recorder.}
  command :auth do |auth|

    auth.desc 'Name of the KDE wallet to use'
    auth.long_desc %{If --wallet is used, --folder and --entry are required.
                     Use of --wallet will invoke the KDE Wallet to retrieve
                     the playonrecorder password.}
    auth.flag [:wallet], type: String

    auth.desc 'Name of the folder in the KDE wallet'
    auth.long_desc %{If --wallet is used, --folder and --entry are required.}
    auth.flag [:folder], type: String, default_value: 'playonrecorder'

    auth.desc 'Name of the entry in the KDE wallet'
    auth.long_desc %{If --wallet is used, --folder and --entry are required.}
    auth.flag [:entry],  type: String, default_value: '< --email parameter >'

    auth.desc 'Authenticate with the PlayOn Recorder'
    auth.long_desc %{use either (KDE) --wallet or --email and --password. If --wallet
                     is used, --folder and --entry are required.}
    arg 'auth'
    auth.action do |global_options, options, args|
      email    = global_options[:email]
      password = ENV['PLAYON_PASSWORD']

      options[:entry] = nil if options[:entry] =~ /--email/

      wallet   = options[:wallet]
      folder   = options[:folder]
      entry    = options[:entry] || email

      if wallet
        if folder.nil? || entry.nil?
          warn 'Error: --wallet requires --folder and --entry'
        end

        wallet = KWallet.new(wallet, folder, entry)

        wallet.get_password
        password = wallet.password

        if password.nil?
          warn 'Error: Unable to retrieve password from KDE Wallet'
        end
      end

      if password.nil?
        print 'Please enter your password: '
        password = $stdin.noecho(&:gets).chomp
        puts
      end

      auth = Auth.new(email, password)
      unless auth.login
        warn 'Error: Authentication failed'
      end

      puts 'Authenticated'
    end
  end

  arg 'videos'
  desc 'Manage videos on the PlayOn Recorder'
  command :videos do |videos|
    videos.desc 'Manipulate videos on the PlayOn Recorder'
    videos.action do |global_options, options, args|
      puts '1'

      videos.switch [:a, :all],               type: :boolean, default: true
      videos.switch [:t, 'by-title'],         type: :string
      videos.switch [:e, 'by-episode'],       type: :string
      videos.switch [:d, 'by-download-date'], type: Date
      videos.switch ['by-series'],            type: :string
      videos.switch ['by-season'],            type: :string

      puts '3'
      arg ['ls', 'list']
      desc 'Actions on recordings on the PlayOn Recorder'
      videos.command [:ls, :list] do |list|
      puts '4'
        list.desc 'List videos on the PlayOn Recorder'
        list.action do |global_options, options, args|
          puts 'List videos'
          # Assuming Library::Videos.new.list is implemented
          vl = Library::Videos.new
          vl.list
        end
      end

      puts '5'
      arg ['rm', 'delete']
      desc 'Actions on recordings on the PlayOn Recorder'
      videos.command [:rm, :delete] do |rm|
      puts '6'
        rm.desc 'Delete videos on the PlayOn Recorder'
        rm.action do |global_options, options, args|
          puts 'Delete videos'
          # Assuming Library::Videos.new.delete is implemented
          del = Library::Videos.new
          del.delete
        end
      end

      puts '7'
      arg['dl', 'download']
      desc 'Actions on recordings on the PlayOn Recorder'
      videos.command [:dl, :download] do |dl|
      puts '8'
        dl.desc 'Download videos from the PlayOn Recorder'
        dl.action do |global_options, options, args|
          puts 'Download videos'
          # Assuming Library::Videos.new.download is implemented
          dl = Library::Videos.new
          dl.download
        end
      end
    end
  end
end
